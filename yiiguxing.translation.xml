<application>
  <component name="AppStorage">
    <option name="newTranslationDialogHeight" value="447" />
    <option name="newTranslationDialogWidth" value="1500" />
    <option name="newTranslationDialogX" value="2" />
    <option name="newTranslationDialogY" value="526" />
    <histories>
      <item value="lookup Registered Provider Urls Without Group" />
      <item value="m Broken" />
      <item value="Protocol can continue to export and refer new service even after it's destroyed." />
      <item value="Release all occupied resources, for example: connection, port, etc." />
      <item value="Eager" />
      <item value="Eager Thread Pool Executor" />
      <item value="Provides transitive vulnerable dependency org.apache.logging.log4j:log4j-core:2.17.0" />
      <item value="characteristics" />
      <item value="External Executor based thread pool." />
      <item value="Waits until there is a task, executes the task and all queued tasks (if there're any). The task is either a normal response or a timeout response." />
      <item value="wait And Drain" />
      <item value="No such extension org.apache.dubbo.common.threadpool.ThreadPool by name ConsumerThreadPool, no related exception was found, please check whether related SPI module is missing." />
      <item value="threadpool" />
      <item value="refer-thread-num" />
      <item value="This generic filter base class has no dependency on the Spring org.springframework.context.ApplicationContext concept. Filters usually don't load their own context but rather access service beans from the Spring root application context, accessible via the filter's ServletContext (see org.springframework.web.context.support.WebApplicationContextUtils)." />
      <item value="Deprecated get extension loader from extension director of some module." />
      <item value="handoff Queue" />
      <item value="Shallow Etag Header Filter" />
      <item value="but guaranteed to be just invoked once per request within a single" />
      <item value="Standard Host" />
      <item value="otherwise" />
      <item value="with the result of the given function of the exception triggering this CompletableFuture's completion when it completes exceptionally" />
      <item value="Returns a new CompletableFuture that is completed when this CompletableFuture completes, with the result of the given function of the exception triggering this CompletableFuture's completion when it completes exceptionally; otherwise, if this CompletableFuture completes normally, then the returned CompletableFuture also completes normally with the same value" />
      <item value="Returns a new CompletionStage that, when either this or the other given stage complete normally" />
      <item value="apply To Either" />
      <item value="period" />
      <item value="simultaneously" />
      <item value="Defines an object that receives requests from the client and sends them to any resource (such as a servlet, HTML file, or JSP file) on the server. The servlet container creates the RequestDispatcher object, which is used as a wrapper around a server resource located at a particular path or given by a particular name. This interface is intended to wrap servlets, but a servlet container can create RequestDispatcher objects to wrap any type of resource." />
      <item value="gift Page Status Reset" />
      <item value="gift Page Status Review" />
      <item value="Gift Page Status Re Check Event" />
      <item value="交集&#10;" />
      <item value="冲突" />
      <item value="买赠&#10;" />
      <item value="Set the time required for concurrent handling to complete. This property should not be set when concurrent handling is in progress, i.e. when isAsyncStarted() is true." />
      <item value="apply Pre Process" />
      <item value="Dispatch the request to the container in order to resume processing after concurrent execution in" />
      <item value="An async scenario starts with request processing as usual in a thread (T1). Concurrent request handling can be initiated by calling startCallableProcessing or startDeferredResultProcessing, both of which produce a result in a separate thread (T2). The result is saved and the request dispatched to the container, to resume processing with the saved result in a third thread (T3). Within the dispatched thread (T3), the saved result can be accessed via getConcurrentResult() or its presence detected via hasConcurrentResult()." />
      <item value="mainly intended as an SPI" />
      <item value="intended" />
      <item value="If included via a RequestDispatcher, the current resource will see the originating request. Its own request URI is exposed as a request attribute" />
      <item value="Checks the presence" />
      <item value="Similar to AppenderBase except that derived appenders need to handle thread synchronization on their" />
      <item value="prudent" />
      <item value="ramp up&#10;" />
      <item value="separate connection" />
      <item value="Maximum queue length for incoming connection requests when all possible request processing threads are in use" />
      <item value="truncated" />
      <item value="Caller Runs Policy" />
      <item value="teeing" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="7535" />
        <entry key="ENGLISH" value="7536" />
        <entry key="CHINESE_CLASSICAL" value="1" />
        <entry key="ALBANIAN" value="1" />
        <entry key="AZERBAIJANI" value="1" />
        <entry key="ICELANDIC" value="1" />
        <entry key="POLISH" value="1" />
        <entry key="DANISH" value="9" />
        <entry key="GERMAN" value="11" />
        <entry key="FRENCH" value="19" />
        <entry key="FINNISH" value="1" />
        <entry key="DUTCH" value="1" />
        <entry key="CATALAN" value="4" />
        <entry key="KURDISH" value="1" />
        <entry key="ROMANIAN" value="7" />
        <entry key="MALAY" value="2" />
        <entry key="NORWEGIAN" value="3" />
        <entry key="PORTUGUESE" value="9" />
        <entry key="SWEDISH" value="4" />
        <entry key="SERBIAN" value="1" />
        <entry key="SLOVAK" value="5" />
        <entry key="WELSH" value="1" />
        <entry key="SPANISH" value="13" />
        <entry key="HUNGARIAN" value="5" />
        <entry key="ITALIAN" value="6" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1663941556282" />
  </component>
  <component name="Settings">
    <option name="baiduTranslateSettings">
      <app-key>
        <option name="appId" value="20191101000350914" />
      </app-key>
    </option>
    <option name="primaryFontFamily" value="JetBrains Mono" />
    <option name="translator" value="BAIDU" />
  </component>
</application>