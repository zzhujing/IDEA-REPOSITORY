<application>
  <component name="AppStorage">
    <histories>
      <item value="Domain" />
      <item value="Domain Evaluation" />
      <item value="估价" />
      <item value="gujia " />
      <item value="so does the multi-plexing of these in the event loop" />
      <item value="Called from arbitrary non-{@link EventExecutor} threads prior to scheduled task submission. * Returns {@code true} if the {@link EventExecutor} thread should be woken immediately to * process the scheduled task (if not already awake)" />
      <item value="prior" />
      <item value="arbitrary" />
      <item value="sketch" />
      <item value="or example, * the implementation of {@code submit(Runnable)} creates an * associated {@code RunnableFuture} that is executed and * returned" />
      <item value="associated" />
      <item value="which is marked as succeeded already" />
      <item value="sensible" />
      <item value="Shortcut method" />
      <item value="{@link MultithreadEventLoopGroup} implementations which is used for NIO {@link Selector} based {@link Channel}s." />
      <item value="{@link MultithreadEventLoopGroup} which must be used for the local transport" />
      <item value="stract base class for {@link EventLoopGroup} implementations that handles their tasks with multiple threads at * the same time" />
      <item value="stract" />
      <item value="Create a new EventExecutor which will later then accessible via the {@link #next()} method. This method will be * called for each thread that will serve this {@link MultithreadEventExecutorGroup}" />
      <item value="via" />
      <item value="accessible" />
      <item value="subtype" />
      <item value="To take advantage of this thread-local variable" />
      <item value="it yields slight performance advantage over using a hash * table, and it is useful when accessed frequently" />
      <item value="subtle" />
      <item value="A special variant of {@link ThreadLocal} that yields higher access performance when accessed from a" />
      <item value="yields" />
      <item value="variant" />
      <item value="notify" />
      <item value="which is" />
      <item value="Submits a value-returning task for execution and returns a * Future representing the pending results of the task. The * Future's {@code get} method will return the task's result upon * successful completion" />
      <item value="Executes the given tasks, returning a list of Futures holding * their status and results when all complete. * {@link Future#isDone} is {@code true} for each * element of the returned list. * Note that a &lt;em&gt;completed&lt;/em&gt; task could have * terminated either normally or by throwing an exception. * The results of this method are undefined if the given * collection is modified while this operation is in progress" />
      <item value="the period between successive executions" />
      <item value="the delay between the termination of one * execution and the commencement of the next" />
      <item value="Creates and executes a periodic action that becomes enabled first * after the given initial delay, and subsequently with the given * period; that is executions will commence after * {@code initialDelay} then {@code initialDelay+period}, then * {@code initialDelay + 2 * period}, and so on. * If any execution of the task * encounters an exception, subsequent executions are suppressed. * Otherwise, the task will only terminate via cancellation or * termination of the executor. If any execution of this task * takes longer than its period, then subsequent executions * may start late, but will not concurrently execute" />
      <item value="subsequent" />
      <item value="suppressed" />
      <item value="commence" />
      <item value="period" />
      <item value="subsequently" />
      <item value="periodic" />
      <item value="periodically" />
      <item value="if any do" />
      <item value="Upon" />
      <item value="normal" />
      <item value="Upon normal or exceptional return" />
      <item value="The results of this method are undefined if the given * collection is modified while this operation is in progress" />
      <item value="progress" />
      <item value="either normally" />
      <item value="other common closure-like" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="845" />
        <entry key="ENGLISH" value="846" />
        <entry key="DANISH" value="3" />
        <entry key="FRENCH" value="6" />
        <entry key="CATALAN" value="2" />
        <entry key="KANNADA" value="1" />
        <entry key="LATVIAN" value="3" />
        <entry key="ROMANIAN" value="1" />
        <entry key="SWEDISH" value="1" />
        <entry key="SLOVENIAN" value="1" />
        <entry key="SPANISH" value="1" />
        <entry key="GREEK" value="1" />
        <entry key="ITALIAN" value="2" />
        <entry key="HINDI" value="1" />
      </map>
    </option>
  </component>
</application>