<application>
  <component name="AppStorage">
    <histories>
      <item value="mall enough * not to waste its space" />
      <item value="it is also responsible for handling their * life-cycle and allows shutting them down in a global fashio" />
      <item value="responsible" />
      <item value="* The {@link EventExecutorGroup} is responsible for providing the {@link EventExecutor}'s to use" />
      <item value="which comes * with some handy methods to see" />
      <item value="a generic * way to access methods." />
      <item value="which allows registering {@link Channel}s that get * processed for later selection during the event loop." />
      <item value="which allows registering {@link Channel}s that get * processed for later selection during the event loop. *" />
      <item value="for later selection" />
      <item value="processed" />
      <item value="pecial EventExecutorGroup which allows registering Channels that get   processed for later selection during the event loop" />
      <item value="* Special {@link EventExecutorGroup} which allows registering {@link Channel}s that get * processed for later selection during the event loop" />
      <item value="ater selection during the event loop" />
      <item value="Special" />
      <item value="Indicates a blocking select should follow" />
      <item value="Memory consistency effects: Actions in a thread prior to * submitting a {@code Runnable} object to an {@code Executor} * &lt;a href=&quot;package-summary.html#MemoryVisibility&quot;&gt;&lt;i&gt;happen-before&lt;/i&gt;&lt;/a&gt; * its execution begins, perhaps in another thread." />
      <item value="consistency" />
      <item value="convenient factory methods for these Executors." />
      <item value="Thread Pool Executor" />
      <item value="extensive" />
      <item value="below * serializes the submission of tasks to a second executor, * illustrating a composite executor." />
      <item value="Thread Per Task Executor" />
      <item value="Per" />
      <item value="Per Task" />
      <item value="每一个" />
      <item value="strictly" />
      <item value="provides a way of decoupling task submission" />
      <item value="also will get returned" />
      <item value="notified" />
      <item value="handle" />
      <item value="get * processed for later selection during the event loop." />
      <item value="which allows registering" />
      <item value="which" />
      <item value="attempt" />
      <item value="corresponding" />
      <item value="the key's channel has been detected to be ready by the key's selector" />
      <item value="readiness" />
      <item value="categories" />
      <item value="determines which operation categories will * be tested for readiness the next time one of the selector's selection * methods is invoked" />
      <item value="6" />
      <item value="Map" />
      <item value="may be interrupted by some other thread in one of * three ways:" />
      <item value="Keys may be cancelled and channels may be closed at any time. Hence the * presence of a key in one or more of a selector's key sets does not imply * that the key is valid or that its channel is open. Application code should * be careful to synchronize and check these conditions as necessary if there * is any possibility that another thread will cancel a key or close a channel" />
      <item value="Changes made to the interest sets of a selector's keys while a * selection operation is in progress have no effect upon that operation; they * will be seen by the next selection operation" />
      <item value="above" />
      <item value="in that order" />
      <item value="Selectors are themselves safe for use by multiple concurrent threads; * their key sets, however, are not" />
      <item value="themselves" />
      <item value="If all of the keys in the key set at the start of this step have empty * interest sets then neither the selected-key set nor any of the keys' * ready-operation sets will be updated" />
      <item value="bitwise-disjoined " />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="552" />
        <entry key="ENGLISH" value="553" />
        <entry key="DANISH" value="3" />
        <entry key="FRENCH" value="3" />
        <entry key="CATALAN" value="2" />
        <entry key="KANNADA" value="1" />
        <entry key="LATVIAN" value="3" />
        <entry key="ROMANIAN" value="1" />
        <entry key="SWEDISH" value="1" />
        <entry key="SLOVENIAN" value="1" />
        <entry key="SPANISH" value="1" />
        <entry key="GREEK" value="1" />
        <entry key="ITALIAN" value="1" />
      </map>
    </option>
  </component>
</application>