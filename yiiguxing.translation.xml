<application>
  <component name="AppStorage">
    <histories>
      <item value="completes exceptionally" />
      <item value="exceptionally" />
      <item value="Either" />
      <item value="Forcibly causes subsequent invocations of method {@link #get()} * and related methods to throw the given exception, whether or * not already completed. This method is designed for use only in * error recovery actions, and even in such situations may result * in ongoing dependent completions using established versus * overwritten outcomes." />
      <item value="unchecked" />
      <item value="checked" />
      <item value="independent" />
      <item value="Arbitrary-arity constructions" />
      <item value="present" />
      <item value="photoshop" />
      <item value="KeppAilav" />
      <item value="obtrude Value" />
      <item value="obtrude Exception" />
      <item value="underlying" />
      <item value="if a * computation involved in the completion of this * CompletableFuture threw an exception" />
      <item value="computation" />
      <item value="conform" />
      <item value="encountered" />
      <item value="Apply" />
      <item value="covering exceptional completion" />
      <item value="is executed with this stage as the argument * to the supplied function." />
      <item value="normally" />
      <item value="Completion Stage" />
      <item value="中转" />
      <item value="中专" />
      <item value="supply" />
      <item value="display" />
      <item value="嵌套" />
      <item value="completable" />
      <item value="Failure Runnable Test" />
      <item value="Faild" />
      <item value="delayed * tasks" />
      <item value="execute after shutdown," />
      <item value="or after setting the policy to * {@code false} when already shutdown." />
      <item value="hese tasks will only terminate upon" />
      <item value="Sets the policy on whether to execute existing delayed * tasks even when this executor has been {@code shutdown" />
      <item value="Sets the policy on whether to execute existing delayed * tasks even" />
      <item value="Delay" />
      <item value="set Execute Existing Delayed Tasks After Shutdown Policy" />
      <item value="Sets the policy on whether to execute existing delayed * tasks even when this executor has been" />
      <item value="Sets the policy on whether to execute existing delayed * tasks even when this executor has been {@code shutdown}." />
      <item value="these tasks will only terminate upon * {@code shutdownNow}, or after setting the policy to * {@code false} when already shutdown. * This value is by default {@code true}." />
      <item value="test Schedule At Fixed Rate" />
      <item value="decouples" />
      <item value="无序" />
      <item value="defect" />
      <item value="whether the thread executing this task should be interrupted in * an attempt to stop the task" />
      <item value="determines" />
      <item value="If successful, * and this task has not started when {@code cancel} is called, * this task should never run" />
      <item value="successful" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="230" />
        <entry key="ENGLISH" value="231" />
        <entry key="DANISH" value="1" />
        <entry key="GERMAN" value="2" />
        <entry key="FRENCH" value="1" />
        <entry key="FINNISH" value="1" />
        <entry key="SWEDISH" value="1" />
        <entry key="SPANISH" value="3" />
      </map>
    </option>
  </component>
  <component name="Settings">
    <option name="baiduTranslateSettings">
      <app-key>
        <option name="appId" value="20191101000350914" />
        <option name="appKeyConfigured" value="true" />
      </app-key>
    </option>
    <option name="ignoreRegExp" value="" />
    <option name="translator" value="fanyi.baidu" />
  </component>
</application>