<application>
  <component name="AppStorage">
    <histories>
      <item value="if any do" />
      <item value="Upon" />
      <item value="normal" />
      <item value="Upon normal or exceptional return" />
      <item value="The results of this method are undefined if the given * collection is modified while this operation is in progress" />
      <item value="progress" />
      <item value="either normally" />
      <item value="other common closure-like" />
      <item value="pending" />
      <item value="representing" />
      <item value="There are no guarantees beyond best-effort attempts to stop * processing actively executing tasks. For example, typical * implementations will cancel via {@link Thread#interrupt}, so any * task that fails to respond to interrupts may never terminate" />
      <item value="halts the * processing of waiting tasks" />
      <item value="awaiting" />
      <item value="nitiates an orderly shutdown in which previously submitted * tasks are executed, but no new tasks will be accepted. * Invocation has no additional effect if already shut down. * * &lt;p&gt;This method does not wait for previously submitted tasks to * complete execution. Use {@link #awaitTermination awaitTermination} * to do that" />
      <item value="This method does not wait for previously submitted tasks to * complete execution. Use {@link #awaitTermination awaitTermination} * to do that" />
      <item value="actively" />
      <item value="prevents" />
      <item value="attempts" />
      <item value="previously" />
      <item value="while the {@link #shutdownNow} method prevents waiting * tasks from starting and attempts to stop currently executing tasks" />
      <item value="An {@link Executor} that provides methods to manage termination and * methods that can produce a {@link Future} for tracking progress of * one or more asynchronous tasks" />
      <item value="specified" />
      <item value="not necessarily created by Netty" />
      <item value="arbitrary" />
      <item value="Removes a task that was added previously via" />
      <item value="Adds a task to be run once at the end of next (or current) {@code eventloop} iteration" />
      <item value="A {@link Future} that is {@link Runnable}. Successful execution of * the {@code run} method causes completion of the {@code Future} * and allows access to its results" />
      <item value="Use offer as we actually only need this to unblock the thread and if offer fails we do not care as there" />
      <item value="accurate quiet period * checks" />
      <item value="thus" />
      <item value="Updates the internal timestamp that tells when a submitted task was executed most recently." />
      <item value="recently" />
      <item value="The user may block on the future and once it unblocks the JVM may terminate" />
      <item value="for the Thread as we are about to terminate and notify // the future" />
      <item value="or the Thread as we are about to terminate and notify // the future" />
      <item value="The user may block on the future and once it unblocks the JVM may terminate // and start unloading classes" />
      <item value="Lets remove all FastThreadLocals for the Thread as we are about to terminate and notify // the future" />
      <item value="waking" />
      <item value="ries to backoff when the task can not be added due restrictions for an configured amount of time. This * is only done if the task was added from outside of the event loop which means * {@link EventExecutor#inEventLoop()} returns {@code false}" />
      <item value="due restrictions" />
      <item value="backoff" />
      <item value="due capacity * restrictions." />
      <item value="注释" />
      <item value="Returns the Future which is notified when all EventExecutors managed by this EventExecutorGroup have been terminated." />
      <item value="Returns the {@link Future} which is notified" />
      <item value="which is notified" />
      <item value="Returns the Future which is notified" />
      <item value="and the quiet period will start over" />
      <item value="Returns the {@link Future} which is notified when all {@link EventExecutor}s managed by this * {@link EventExecutorGroup} have been terminated" />
      <item value="eturns {@code true} if and only if all {@link EventExecutor}s managed by this {@link EventExecutorGroup} * are being {@linkplain #shutdownGracefully() shut down gracefully} or was {@linkplain #isShutdown() shut down" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="806" />
        <entry key="ENGLISH" value="807" />
        <entry key="DANISH" value="3" />
        <entry key="FRENCH" value="5" />
        <entry key="CATALAN" value="2" />
        <entry key="KANNADA" value="1" />
        <entry key="LATVIAN" value="3" />
        <entry key="ROMANIAN" value="1" />
        <entry key="SWEDISH" value="1" />
        <entry key="SLOVENIAN" value="1" />
        <entry key="SPANISH" value="1" />
        <entry key="GREEK" value="1" />
        <entry key="ITALIAN" value="2" />
        <entry key="HINDI" value="1" />
      </map>
    </option>
  </component>
</application>