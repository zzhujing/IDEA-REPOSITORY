<application>
  <component name="AppStorage">
    <histories>
      <item value="beans Of Type Including Ancestors" />
      <item value="Ancestors" />
      <item value="bean" />
      <item value="hierarchical" />
      <item value="Ω递归```" />
      <item value="Ω递归" />
      <item value="alternative" />
      <item value="ancestor" />
      <item value="Capable" />
      <item value="Abstract Autowire Capable Bean Factory" />
      <item value="predict" />
      <item value="This callback will be applied to bean definitions with their bean class, * as well as to factory-method definitions in which case the returned bean type * will be passed in here" />
      <item value="further" />
      <item value="the bean creation process * will be short-circuited" />
      <item value="effectively" />
      <item value="post-processor having kicked in" />
      <item value="kicked in" />
      <item value="kicked" />
      <item value="indicates" />
      <item value="canonical Name" />
      <item value="in Creation Check Exclusions" />
      <item value="in creation checks" />
      <item value="creation failed" />
      <item value="dereference" />
      <item value="consequence" />
      <item value="Aware" />
      <item value="Smart Instantiation Aware Bean Post Processor" />
      <item value="typically for the purpose of resolving a circular reference." />
      <item value="infrastructure" />
      <item value="hat is, not defined * by the application itself (for example, an infrastructure bean such * as a helper for auto-proxying, created through {@code &lt;aop:config&gt;})." />
      <item value="synthetic" />
      <item value="In other words: Those post-process * callbacks may either eventually expose the same reference or alternatively * return the raw bean instance from those subsequent callbacks (if the wrapper * for the affected bean has been built for a call to this method already, * it will be exposes as final bean reference by default)" />
      <item value="is Synthetic" />
      <item value="typically for the purpose of resolving a circular reference" />
      <item value="Return whether this bean definition is 'synthetic', that is, * not defined by the application itself" />
      <item value="because of circular reference processing triggered by custom getBean calls" />
      <item value="Only post-process and store if not put there already during getObject() call above" />
      <item value="encouraged" />
      <item value="when it can't be deduced from * the factory bean class" />
      <item value="can signal their object" />
      <item value="signal" />
      <item value="The name of an attribute that can be * {@link org.springframework.core.AttributeAccessor#setAttribute set} on a * {@link org.springframework.beans.factory.config.BeanDefinition} so that * factory beans can signal their object type when it can't be deduced from * the factory bean class" />
      <item value="It is also allowed to modify the bean definition but * &lt;i&gt;only&lt;/i&gt; for definition properties which are actually intended for concurrent * modification" />
      <item value="introspect" />
      <item value="a processed copy of the original bean * definition" />
      <item value="destroy Singletons" />
      <item value="Do not request a bean from a BeanFactory in a destroy method implementation!" />
      <item value="Flag that indicates whether we're currently within destroySingletons." />
      <item value="Prototype beans currently in creation" />
      <item value="is Prototype Currently In Creation" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="715" />
        <entry key="ENGLISH" value="716" />
        <entry key="DANISH" value="3" />
        <entry key="GERMAN" value="5" />
        <entry key="FRENCH" value="4" />
        <entry key="FINNISH" value="1" />
        <entry key="PORTUGUESE" value="2" />
        <entry key="SWEDISH" value="1" />
        <entry key="SPANISH" value="4" />
        <entry key="HUNGARIAN" value="4" />
      </map>
    </option>
  </component>
  <component name="Settings">
    <option name="baiduTranslateSettings">
      <app-key>
        <option name="appId" value="20191101000350914" />
        <option name="appKeyConfigured" value="true" />
      </app-key>
    </option>
    <option name="ignoreRegExp" value="" />
  </component>
</application>