<application>
  <component name="AppStorage">
    <histories>
      <item value="com.google.common.reflect.TypeToken' is marked unstable" />
      <item value="Consider writing a Map with key Class mapped to a predefined ParameterizedTypeReference for that class" />
      <item value="Type parameter 'O' hides type parameter 'O'" />
      <item value="process" />
      <item value="解释" />
      <item value="identifyNum" />
      <item value="实名认证" />
      <item value="runs faster than this loop" />
      <item value="for typical instances of the class, this loop" />
      <item value="It is recognized that the distinction between random and sequential * access is often fuzzy. For example, some &lt;tt&gt;List&lt;/tt&gt; implementations * provide asymptotically linear access times if they get huge, but constant * access times in practice. Such a &lt;tt&gt;List&lt;/tt&gt; implementation * should generally implement this interface. As a rule of thumb, a * &lt;tt&gt;List&lt;/tt&gt; implementation should implement this interface if, * for typical instances of the class, this loop:" />
      <item value="&lt;p&gt;The best algorithms for manipulating random access lists (such as * &lt;tt&gt;ArrayList&lt;/tt&gt;) can produce quadratic behavior when applied to * sequential access lists (such as &lt;tt&gt;LinkedList&lt;/tt&gt;). Generic list * algorithms are encouraged to check whether the given list is an * &lt;tt&gt;instanceof&lt;/tt&gt; this interface before applying an algorithm that would * provide poor performance if it were applied to a sequential access list, * and to alter their behavior if necessary to guarantee acceptable * performance" />
      <item value="manipulating" />
      <item value="Marker interface used by &lt;tt&gt;List&lt;/tt&gt; implementations to indicate that * they support fast (generally constant time) random access. The primary * purpose of this interface is to allow generic algorithms to alter their * behavior to provide good performance when applied to either random or * sequential access lists" />
      <item value="数据结构和算法" />
      <item value="算法" />
      <item value="java_algoaritm" />
      <item value="Domain" />
      <item value="Domain Evaluation" />
      <item value="估价" />
      <item value="gujia " />
      <item value="so does the multi-plexing of these in the event loop" />
      <item value="Called from arbitrary non-{@link EventExecutor} threads prior to scheduled task submission. * Returns {@code true} if the {@link EventExecutor} thread should be woken immediately to * process the scheduled task (if not already awake)" />
      <item value="prior" />
      <item value="arbitrary" />
      <item value="sketch" />
      <item value="or example, * the implementation of {@code submit(Runnable)} creates an * associated {@code RunnableFuture} that is executed and * returned" />
      <item value="associated" />
      <item value="which is marked as succeeded already" />
      <item value="sensible" />
      <item value="Shortcut method" />
      <item value="{@link MultithreadEventLoopGroup} implementations which is used for NIO {@link Selector} based {@link Channel}s." />
      <item value="{@link MultithreadEventLoopGroup} which must be used for the local transport" />
      <item value="stract base class for {@link EventLoopGroup} implementations that handles their tasks with multiple threads at * the same time" />
      <item value="stract" />
      <item value="Create a new EventExecutor which will later then accessible via the {@link #next()} method. This method will be * called for each thread that will serve this {@link MultithreadEventExecutorGroup}" />
      <item value="via" />
      <item value="accessible" />
      <item value="subtype" />
      <item value="To take advantage of this thread-local variable" />
      <item value="it yields slight performance advantage over using a hash * table, and it is useful when accessed frequently" />
      <item value="subtle" />
      <item value="A special variant of {@link ThreadLocal} that yields higher access performance when accessed from a" />
      <item value="yields" />
      <item value="variant" />
      <item value="notify" />
      <item value="which is" />
      <item value="Submits a value-returning task for execution and returns a * Future representing the pending results of the task. The * Future's {@code get} method will return the task's result upon * successful completion" />
      <item value="Executes the given tasks, returning a list of Futures holding * their status and results when all complete. * {@link Future#isDone} is {@code true} for each * element of the returned list. * Note that a &lt;em&gt;completed&lt;/em&gt; task could have * terminated either normally or by throwing an exception. * The results of this method are undefined if the given * collection is modified while this operation is in progress" />
      <item value="the period between successive executions" />
      <item value="the delay between the termination of one * execution and the commencement of the next" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="856" />
        <entry key="ENGLISH" value="856" />
        <entry key="DANISH" value="3" />
        <entry key="FRENCH" value="6" />
        <entry key="CATALAN" value="2" />
        <entry key="KANNADA" value="1" />
        <entry key="LATVIAN" value="3" />
        <entry key="ROMANIAN" value="1" />
        <entry key="SWEDISH" value="1" />
        <entry key="SLOVENIAN" value="1" />
        <entry key="SPANISH" value="1" />
        <entry key="GREEK" value="1" />
        <entry key="ITALIAN" value="2" />
        <entry key="HINDI" value="1" />
      </map>
    </option>
  </component>
</application>