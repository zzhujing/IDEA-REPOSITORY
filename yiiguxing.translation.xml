<application>
  <component name="AppStorage">
    <option name="newTranslationDialogHeight" value="256" />
    <option name="newTranslationDialogWidth" value="896" />
    <option name="newTranslationDialogX" value="676" />
    <option name="newTranslationDialogY" value="587" />
    <option name="pinNewTranslationDialog" value="true" />
    <histories>
      <item value="as well as" />
      <item value="Used by condition wait methods as well as acquire" />
      <item value="predecessor" />
      <item value="racy" />
      <item value="possibly racy reads" />
      <item value="Returns a stamp that can later be validated, or zero if exclusively locked." />
      <item value="Invoking this method with a value not obtained from {@link tryOptimisticRead} or a locking method for this lock has no defined effect or result." />
      <item value="hypot" />
      <item value="升级&#10;" />
      <item value="降级&#10;" />
      <item value="If the lock state matches the given stamp, atomically performs one of the following actions. If the stamp represents holding a write lock, returns it. Or, if a read lock, if the write lock is available, releases the read lock and returns a write stamp. Or, if an optimistic read, returns a write stamp only if immediately available." />
      <item value="atomically performs one of the following actions" />
      <item value="performs" />
      <item value="zero if acquisition in shared mode succeeded but no subsequent shared-mode acquire can succeed" />
      <item value="Release action for shared mode -- signals successor and ensures propagation" />
      <item value="Sets head of queue, and checks if successor may be waiting in shared mode, if so propagating if either propagate &gt; 0 or PROPAGATE status was set." />
      <item value="If successor needs signal, try to set pred's next-link so it will get one. Otherwise wake it up to propagate." />
      <item value="Wakes up node's successor, if one exists." />
      <item value="predNext is the apparent node to unsplice. CASes below will fail if not, in which case, we lost race vs another cancel or signal, so no further action is necessary, although with a possibility that a cancelled node may transiently remain reachable." />
      <item value="Otherwise" />
      <item value="exclusive" />
      <item value="Otherwise, this thread is eligible for lock if it is either a reentrant acquire or queue policy allows it. If so, update state and set owner." />
      <item value="saturate" />
      <item value="Walkthrough" />
      <item value="Reserved Stack Access" />
      <item value="Returns true if the current thread, when trying to acquire the read lock, and otherwise eligible to do so, should block because of policy for overtaking other waiting threads" />
      <item value="waitStatus value to indicate the next acquireShared should unconditionally propagate" />
      <item value="But under high contention, expected throughput of this class is significantly higher" />
      <item value="how Much" />
      <item value="Alive Lock Demo" />
      <item value="The abstract class {@link ApplicationListener} for {@link ApplicationContextEvent} guarantees just one-time execution and prevents the event propagation in the hierarchical {@link ApplicationContext ApplicationContexts}" />
      <item value="has Queued Predecessors" />
      <item value="Latch" />
      <item value="Count Down Latch" />
      <item value="Interrupting a thread that is not alive need not have any effect" />
      <item value="If none of the previous conditions hold then this thread's interrupt status will be set" />
      <item value="relinquish" />
      <item value="or until a certain amount of real time has elapsed." />
      <item value="awakened" />
      <item value="incorrectly" />
      <item value="Once the requested media type has been determined, this resolver queries each delegate view resolver for a {@link View} and determines if the requested media type is {@linkplain MediaTypeincludes(MediaType) compatible} with the view's {@linkplain ViewgetContentType() content type}). The most compatible view is returned." />
      <item value="though&#10;" />
      <item value="&#10;though&#10;" />
      <item value="Ωthough&#10;" />
      <item value="through&#10;" />
      <item value="Ω" />
      <item value="are picked up automatically" />
      <item value="the handler (or {@link HandlerMethod}) that started asynchronous execution, for type andor instance examination" />
      <item value="&lt;p&gt;&lt;strong&gt;Note&lt;strong&gt; that adding converters to the list, turns off default converter registration. To simply add a converter without impacting default registration, consider using the method {@link extendMessageConverters(java.util.List)} instead." />
      <item value="turns off" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="2908" />
        <entry key="ENGLISH" value="2909" />
        <entry key="ALBANIAN" value="1" />
        <entry key="AZERBAIJANI" value="1" />
        <entry key="ICELANDIC" value="1" />
        <entry key="DANISH" value="8" />
        <entry key="GERMAN" value="8" />
        <entry key="FRENCH" value="14" />
        <entry key="FINNISH" value="1" />
        <entry key="DUTCH" value="1" />
        <entry key="CATALAN" value="2" />
        <entry key="KURDISH" value="1" />
        <entry key="ROMANIAN" value="5" />
        <entry key="PORTUGUESE" value="6" />
        <entry key="SWEDISH" value="2" />
        <entry key="SLOVAK" value="1" />
        <entry key="WELSH" value="1" />
        <entry key="SPANISH" value="13" />
        <entry key="HUNGARIAN" value="5" />
        <entry key="ITALIAN" value="2" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1614575776532" />
  </component>
  <component name="Settings">
    <option name="baiduTranslateSettings">
      <app-key>
        <option name="appId" value="20191101000350914" />
      </app-key>
    </option>
    <option name="primaryFontFamily" value="JetBrains Mono" />
    <option name="translator" value="BAIDU" />
  </component>
</application>