<application>
  <component name="AppStorage">
    <histories>
      <item value="The context ClassLoader of the * primordial thread is typically set to the class loader used to load the * application." />
      <item value="primordial" />
      <item value="classification" />
      <item value="分类" />
      <item value="垃圾分类" />
      <item value="垃圾箱" />
      <item value="垃圾" />
      <item value="积分模块" />
      <item value="积分" />
      <item value="Load these drivers, so that they can be instantiated. * It may be the case that the driver class may not be there * i.e. there may be a packaged driver with the service class * as implementation of java.sql.Driver but the actual class * may be missing. In that case a java.util.ServiceConfigurationError * will be thrown at runtime by the VM trying to locate * and load the service. * * Adding a try catch block to catch those runtime errors * if driver not available in classpath but it's * packaged as service and that service is there in classpath." />
      <item value="exposed as a java.sql.Driver.class service" />
      <item value="Get all the drivers through the classloader" />
      <item value="If the driver is packaged as a Service Provider, load it. // Get all the drivers through the classloader // exposed as a java.sql.Driver.class service. // ServiceLoader.load() replaces the sun.misc.Providers()" />
      <item value="Encrypt Utils" />
      <item value="Encypt Utils" />
      <item value="练习" />
      <item value="联系" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="7" />
        <entry key="ENGLISH" value="8" />
        <entry key="SPANISH" value="1" />
      </map>
    </option>
  </component>
  <component name="Settings">
    <option name="baiduTranslateSettings">
      <app-key>
        <option name="appKeyConfigured" value="true" />
      </app-key>
    </option>
    <option name="ignoreRegExp" value="" />
  </component>
</application>