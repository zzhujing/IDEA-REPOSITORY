<application>
  <component name="AppStorage">
    <histories>
      <item value="This is typically path relative to a context-specific root directory" />
      <item value="traversal" />
      <item value="Malformed URL Exception" />
      <item value="within" />
      <item value="retrieve Matching Files" />
      <item value="pointers" />
      <item value="incomplete" />
      <item value="For any preceding custom resolution, * override this method and replace the resource handle accordingly" />
      <item value="traversed" />
      <item value="Equinox OSGi" />
      <item value="determine Root Dir" />
      <item value="searching backward starting at the specified index" />
      <item value="Returns the index within this string of the last occurrence of the * specified substring" />
      <item value="and serves as base class for * {@link org.springframework.context.support.AbstractApplicationContext}. * Can also be used standalone" />
      <item value="ClassPathResource that explicitly expresses a context-relative path * through implementing the ContextResource interface" />
      <item value="get Path Within Context" />
      <item value="Return the path within the enclosing 'context'" />
      <item value="specified * without an explicit prefix, hence applying relative to the local" />
      <item value="enclosing" />
      <item value="relative Path" />
      <item value="hence" />
      <item value="but also * from plain classpath paths or relative file system paths (specified * without an explicit prefix, hence applying relative to the local * {@link ResourceLoader}'s context)" />
      <item value="{@link ResourceLoader} implementation that interprets plain resource paths * as relative to a given {@code java.lang.Class}." />
      <item value="Extended interface for a resource that is loaded from an enclosing * 'context', e.g. from a {@link javax.servlet.ServletContext} but also * from plain classpath paths or relative file system paths (specified * without an explicit prefix, hence applying relative to the local * {@link ResourceLoader}'s context)." />
      <item value="relative" />
      <item value="associated" />
      <item value="A resolution strategy for protocol-specific resource handles." />
      <item value="A resolution strategy for protocol-specific resource handles" />
      <item value="resolution" />
      <item value="This should * be appropriate for standalone implementations but can be overridden" />
      <item value="appropriate for standalone" />
      <item value="Used as an SPI for {@link DefaultResourceLoader}, allowing for * custom protocols to be handled without subclassing the loader * implementation (or application context implementation)" />
      <item value="protocol-specific resource handles" />
      <item value="pseudo" />
      <item value="to be * resolved as {@link org.springframework.core.env.Environment} properties" />
      <item value="Editor" />
      <item value="Delegates to a {@link ResourceLoader} to do the heavy lifting, * by default using a {@link DefaultResourceLoader}" />
      <item value="heavy lifting" />
      <item value="lifting" />
      <item value="Delegates" />
      <item value="apply Relative Path" />
      <item value="the class to load resources with" />
      <item value="alternative" />
      <item value="This will cover both directories and content resources." />
      <item value="his implementation checks whether a File can be opened, * falling back to whether an InputStream can be opened. * This will cover both directories and content resources." />
      <item value="existence" />
      <item value="handle only guarantees a valid * descriptor handle." />
      <item value="Determine whether this resource actually exists in physical form" />
      <item value="in physical form" />
      <item value="Return a provider for the specified bean, allowing for lazy on-demand retrieval * of instances, including availability and uniqueness options" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="437" />
        <entry key="ENGLISH" value="438" />
        <entry key="DANISH" value="3" />
        <entry key="GERMAN" value="4" />
        <entry key="FRENCH" value="4" />
        <entry key="FINNISH" value="1" />
        <entry key="SWEDISH" value="1" />
        <entry key="SPANISH" value="3" />
        <entry key="HUNGARIAN" value="2" />
      </map>
    </option>
  </component>
  <component name="Settings">
    <option name="baiduTranslateSettings">
      <app-key>
        <option name="appId" value="20191101000350914" />
        <option name="appKeyConfigured" value="true" />
      </app-key>
    </option>
    <option name="ignoreRegExp" value="" />
    <option name="translator" value="fanyi.baidu" />
  </component>
</application>