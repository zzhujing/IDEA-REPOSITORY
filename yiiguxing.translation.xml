<application>
  <component name="AppStorage">
    <histories>
      <item value="attempts" />
      <item value="prevents" />
      <item value="terminating" />
      <item value="which will cause * it to reject new tasks" />
      <item value="previously" />
      <item value="allows shutting them down in a global fashion" />
      <item value="a global fashion" />
      <item value="handling" />
      <item value="Besides" />
      <item value="responsible" />
      <item value="Signals this executor that the caller wants the executor to be shut down. Once this method is called, * {@link #isShuttingDown()} starts to return {@code true}, and the executor prepares to shut itself down. * Unlike {@link #shutdown()}, graceful shutdown ensures that no tasks are submitted for &lt;i&gt;'the quiet period'&lt;/i&gt; * (usually a couple seconds) before it shuts itself down. If a task is submitted during the quiet period, * it is guaranteed to be accepted and the quiet period will start over" />
      <item value="Gracefully" />
      <item value="stract base class for {@link EventLoopGroup} implementations that handles their tasks with multiple threads at * * the same time" />
      <item value="Abstract base class for {@link EventExecutorGroup} implementations that handles their tasks with multiple threads at * the same time" />
      <item value="offer" />
      <item value="The executor below * serializes the submission of tasks to a second executor, * illustrating a composite executor. *" />
      <item value="The executor below * serializes the submission of tasks to a second executor, * illustrating a composite executor." />
      <item value="Many {@code Executor} implementations impose some sort of * limitation on how and when tasks are scheduled" />
      <item value="impose" />
      <item value="below spawns" />
      <item value="typically" />
      <item value="strictly" />
      <item value="decoupling" />
      <item value="An {@link Executor} that provides methods to manage termination and * methods that can produce a {@link Future} for tracking progress of * one or more asynchronous tasks." />
      <item value="actively" />
      <item value="Initiates an orderly shutdown in which previously submitted * tasks are executed, but no new tasks will be accepted. * Invocation has no additional effect if already shut down" />
      <item value="upon" />
      <item value="representing" />
      <item value="Shrink" />
      <item value="backlog" />
      <item value="wildcard" />
      <item value="wildcard address" />
      <item value="receive a broadcast packet" />
      <item value="Make this future impossible to cancel" />
      <item value="is Compatible" />
      <item value="renew" />
      <item value="audit" />
      <item value="审核" />
      <item value="域名解析" />
      <item value="解析" />
      <item value="Extension Config" />
      <item value="Retention" />
      <item value="registrant Type" />
      <item value="ensure Register" />
      <item value="invaild" />
      <item value="handle" />
      <item value="some handy methods" />
      <item value="exposes logical level" />
      <item value="Creates an {@link SqlSession} out of a connection or a DataSource" />
      <item value="domain Threshold" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="708" />
        <entry key="ENGLISH" value="709" />
        <entry key="DANISH" value="3" />
        <entry key="FRENCH" value="5" />
        <entry key="CATALAN" value="2" />
        <entry key="KANNADA" value="1" />
        <entry key="LATVIAN" value="3" />
        <entry key="ROMANIAN" value="1" />
        <entry key="SWEDISH" value="1" />
        <entry key="SLOVENIAN" value="1" />
        <entry key="SPANISH" value="1" />
        <entry key="GREEK" value="1" />
        <entry key="ITALIAN" value="2" />
        <entry key="HINDI" value="1" />
      </map>
    </option>
  </component>
</application>