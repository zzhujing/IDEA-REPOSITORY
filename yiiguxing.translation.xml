<application>
  <component name="AppStorage">
    <histories>
      <item value="Returns the approximate number of threads that are actively * executing tasks" />
      <item value="On-demand construction&lt;" />
      <item value="only upon construction" />
      <item value="o accommodate an arbitrary * number of concurrent tasks" />
      <item value="essentially unbounded value" />
      <item value="ssentially unbounded value" />
      <item value="essentially" />
      <item value="fewer" />
      <item value="adjust" />
      <item value="maintains some basic * statistics, such as the number of completed tasks" />
      <item value="due to reduced per-task invocation overhead, * and they provide a means of bounding and managing the resources" />
      <item value="they usually * provide improved performance when executing large numbers of * asynchronous tasks" />
      <item value="asynchronous" />
      <item value="address two different problems" />
      <item value="address" />
      <item value="possibly several pooled" />
      <item value="possibly" />
      <item value="Alipay Trade Page Pay Request" />
      <item value="Alipay Fund Trans Uni Transfer Request" />
      <item value=" ambiguous" />
      <item value="重连" />
      <item value="断网记录" />
      <item value="Illegal character ((CTRL-CHAR, code 27)): only regular white space (\r, \n, \t) is allowed between tokens" />
      <item value="Either this method or {@link #getReader} may * be called to read the body, not both" />
      <item value="if Present" />
      <item value="SHUTDOWN" />
      <item value="损坏的" />
      <item value="INJECT" />
      <item value="正常" />
      <item value="If the parameter data was sent in the request body, such as occurs with * an HTTP POST request, then reading the body directly via * {@link #getInputStream} or {@link #getReader} can interfere with the * execution of this method." />
      <item value="刷卡器" />
      <item value=" 信号强度" />
      <item value="状态" />
      <item value="status" />
      <item value="stats" />
      <item value="Property" />
      <item value="所属物业" />
      <item value="物业" />
      <item value="advance" />
      <item value="Phaser" />
      <item value="until" />
      <item value="The effects of invoking * arrival, registration, and waiting methods on this phaser from * within {@code onAdvance} are unspecified and should not be * relied on." />
      <item value="prevailing" />
      <item value="The arguments to this method provide the state of the phaser * prevailing for the current transition" />
      <item value="in which case no advance * occurs" />
      <item value="this phaser will be set to a final termination state * upon advance" />
      <item value="when all other * waiting parties are dormant" />
      <item value="This method is invoked * upon arrival of the party advancing this phaser" />
      <item value="upon arrival of the party advancing this phaser" />
      <item value="in which case the prevailing phase prior to termination * may be obtained via {@code getPhase() + Integer.MIN_VALUE}." />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="169" />
        <entry key="ENGLISH" value="170" />
        <entry key="DANISH" value="1" />
        <entry key="GERMAN" value="2" />
        <entry key="FRENCH" value="1" />
        <entry key="FINNISH" value="1" />
        <entry key="SWEDISH" value="1" />
        <entry key="SPANISH" value="3" />
      </map>
    </option>
  </component>
  <component name="Settings">
    <option name="baiduTranslateSettings">
      <app-key>
        <option name="appId" value="20191101000350914" />
        <option name="appKeyConfigured" value="true" />
      </app-key>
    </option>
    <option name="ignoreRegExp" value="" />
    <option name="translator" value="fanyi.baidu" />
  </component>
</application>