<application>
  <component name="AppStorage">
    <histories>
      <item value="Instance Holder" />
      <item value="设计模式" />
      <item value="设计" />
      <item value="实际" />
      <item value="循环队列" />
      <item value="循环" />
      <item value="玄幻" />
      <item value="Reject Policy" />
      <item value="拒绝" />
      <item value="capture" />
      <item value="captrue" />
      <item value="抓取" />
      <item value="Service" />
      <item value="Capture" />
      <item value="CaptureService" />
      <item value="Caoture" />
      <item value="通信" />
      <item value="synchronized" />
      <item value="概念" />
      <item value="This method is not invoked for the main method thread or &quot;system&quot; * group threads created/set up by the VM. Any new functionality added * to this method in the future may have to also be added to the VM." />
      <item value="ret" />
      <item value="Recursion Demo" />
      <item value="Recursion" />
      <item value="Cirular Queue" />
      <item value="Cirular" />
      <item value="Cirular Queue Demo" />
      <item value="Circle Queue Demo" />
      <item value="structure" />
      <item value="œ" />
      <item value="'continue' is unnecessary as the last statement in a loop" />
      <item value="process" />
      <item value="解释" />
      <item value="identifyNum" />
      <item value="实名认证" />
      <item value="runs faster than this loop" />
      <item value="for typical instances of the class, this loop" />
      <item value="It is recognized that the distinction between random and sequential * access is often fuzzy. For example, some &lt;tt&gt;List&lt;/tt&gt; implementations * provide asymptotically linear access times if they get huge, but constant * access times in practice. Such a &lt;tt&gt;List&lt;/tt&gt; implementation * should generally implement this interface. As a rule of thumb, a * &lt;tt&gt;List&lt;/tt&gt; implementation should implement this interface if, * for typical instances of the class, this loop:" />
      <item value="&lt;p&gt;The best algorithms for manipulating random access lists (such as * &lt;tt&gt;ArrayList&lt;/tt&gt;) can produce quadratic behavior when applied to * sequential access lists (such as &lt;tt&gt;LinkedList&lt;/tt&gt;). Generic list * algorithms are encouraged to check whether the given list is an * &lt;tt&gt;instanceof&lt;/tt&gt; this interface before applying an algorithm that would * provide poor performance if it were applied to a sequential access list, * and to alter their behavior if necessary to guarantee acceptable * performance" />
      <item value="manipulating" />
      <item value="Marker interface used by &lt;tt&gt;List&lt;/tt&gt; implementations to indicate that * they support fast (generally constant time) random access. The primary * purpose of this interface is to allow generic algorithms to alter their * behavior to provide good performance when applied to either random or * sequential access lists" />
      <item value="数据结构和算法" />
      <item value="算法" />
      <item value="java_algoaritm" />
      <item value="Domain" />
      <item value="Domain Evaluation" />
      <item value="估价" />
      <item value="gujia " />
      <item value="so does the multi-plexing of these in the event loop" />
      <item value="Called from arbitrary non-{@link EventExecutor} threads prior to scheduled task submission. * Returns {@code true} if the {@link EventExecutor} thread should be woken immediately to * process the scheduled task (if not already awake)" />
      <item value="prior" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="871" />
        <entry key="ENGLISH" value="871" />
        <entry key="DANISH" value="3" />
        <entry key="FRENCH" value="6" />
        <entry key="GALICIAN" value="1" />
        <entry key="CATALAN" value="2" />
        <entry key="KANNADA" value="1" />
        <entry key="LATVIAN" value="3" />
        <entry key="ROMANIAN" value="1" />
        <entry key="SWEDISH" value="1" />
        <entry key="SLOVENIAN" value="1" />
        <entry key="SPANISH" value="1" />
        <entry key="GREEK" value="1" />
        <entry key="ITALIAN" value="2" />
        <entry key="HINDI" value="1" />
      </map>
    </option>
  </component>
</application>