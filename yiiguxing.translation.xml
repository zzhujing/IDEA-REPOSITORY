<application>
  <component name="AppStorage">
    <option name="newTranslationDialogHeight" value="256" />
    <option name="newTranslationDialogWidth" value="896" />
    <option name="newTranslationDialogX" value="676" />
    <option name="newTranslationDialogY" value="587" />
    <option name="pinNewTranslationDialog" value="true" />
    <histories>
      <item value="how Much" />
      <item value="Alive Lock Demo" />
      <item value="The abstract class {@link ApplicationListener} for {@link ApplicationContextEvent} guarantees just one-time execution and prevents the event propagation in the hierarchical {@link ApplicationContext ApplicationContexts}" />
      <item value="has Queued Predecessors" />
      <item value="Latch" />
      <item value="Count Down Latch" />
      <item value="Interrupting a thread that is not alive need not have any effect" />
      <item value="If none of the previous conditions hold then this thread's interrupt status will be set" />
      <item value="relinquish" />
      <item value="or until a certain amount of real time has elapsed." />
      <item value="awakened" />
      <item value="incorrectly" />
      <item value="Once the requested media type has been determined, this resolver queries each delegate view resolver for a {@link View} and determines if the requested media type is {@linkplain MediaTypeincludes(MediaType) compatible} with the view's {@linkplain ViewgetContentType() content type}). The most compatible view is returned." />
      <item value="though&#10;" />
      <item value="&#10;though&#10;" />
      <item value="Ωthough&#10;" />
      <item value="through&#10;" />
      <item value="Ω" />
      <item value="are picked up automatically" />
      <item value="the handler (or {@link HandlerMethod}) that started asynchronous execution, for type andor instance examination" />
      <item value="&lt;p&gt;&lt;strong&gt;Note&lt;strong&gt; that adding converters to the list, turns off default converter registration. To simply add a converter without impacting default registration, consider using the method {@link extendMessageConverters(java.util.List)} instead." />
      <item value="turns off" />
      <item value="A hook for extending or modifying the list of converters after it has been configured. This may be useful for example to allow default converters to be registered and then insert a custom converter through this method." />
      <item value="get Variable Name For Parameter" />
      <item value="Content Negotiation Strategy" />
      <item value="A base class for resolving method argument values by reading from the body of a request with {@link HttpMessageConverter HttpMessageConverters}." />
      <item value="Extends {@link AbstractMessageConverterMethodArgumentResolver} with the ability to handle method return values by writing to the response with {@link HttpMessageConverter HttpMessageConverters}." />
      <item value="ability" />
      <item value="parts" />
      <item value="f Applicable" />
      <item value="potentially" />
      <item value="get Containing Class" />
      <item value="Effectively &quot;resumes&quot; processing with the asynchronously produced return value" />
      <item value="use Trailing Slash Match" />
      <item value="remove Semicolon Content" />
      <item value="consumed" />
      <item value="Narrows" />
      <item value="with a request only mapped if each such parameter is found to have the given value" />
      <item value="narrowing" />
      <item value="detect Handler Methods In Ancestor Contexts" />
      <item value="Response Body Emitter" />
      <item value="The ServletResponse with which to initialise the asynchronous context" />
      <item value="is Pre Flight Request" />
      <item value="he syntax is largely the same with the latter being more tailored for web usage and more efficient" />
      <item value="throw When Exists" />
      <item value="emitter&#10;" />
      <item value="a variable name is not specified, then the map is populated with all matrix variable names and values.&#10;" />
      <item value="Matrix Variable" />
      <item value="containing Class" />
      <item value="Expose cause as provided argument as well" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="2882" />
        <entry key="ENGLISH" value="2883" />
        <entry key="ALBANIAN" value="1" />
        <entry key="AZERBAIJANI" value="1" />
        <entry key="ICELANDIC" value="1" />
        <entry key="DANISH" value="8" />
        <entry key="GERMAN" value="8" />
        <entry key="FRENCH" value="14" />
        <entry key="FINNISH" value="1" />
        <entry key="DUTCH" value="1" />
        <entry key="CATALAN" value="2" />
        <entry key="KURDISH" value="1" />
        <entry key="ROMANIAN" value="5" />
        <entry key="PORTUGUESE" value="6" />
        <entry key="SWEDISH" value="2" />
        <entry key="SLOVAK" value="1" />
        <entry key="WELSH" value="1" />
        <entry key="SPANISH" value="13" />
        <entry key="HUNGARIAN" value="5" />
        <entry key="ITALIAN" value="2" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1614575776532" />
  </component>
  <component name="Settings">
    <option name="baiduTranslateSettings">
      <app-key>
        <option name="appId" value="20191101000350914" />
      </app-key>
    </option>
    <option name="primaryFontFamily" value="JetBrains Mono" />
    <option name="translator" value="BAIDU" />
  </component>
</application>