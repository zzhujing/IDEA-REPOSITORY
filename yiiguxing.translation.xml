<application>
  <component name="AppStorage">
    <histories>
      <item value="Origin Tracked Map" />
      <item value="escaped" />
      <item value="get Negative Profile Filter" />
      <item value="get Positive Profile Filter" />
      <item value="deque" />
      <item value="Webb" />
      <item value="Determine whether this listener actually supports the given source type" />
      <item value="算数" />
      <item value="表达式" />
      <item value="监管" />
      <item value="Constraint" />
      <item value="property Floor Str" />
      <item value="œ" />
      <item value="Hint for that an auto-configuration should be applied after other specified auto-configuration classes." />
      <item value="outcomes" />
      <item value="ANCESTORS" />
      <item value="Additional" />
      <item value="ancestors" />
      <item value="decorating" />
      <item value="get Match Outcome" />
      <item value="in a form that does not necessarily require the * class-loading." />
      <item value="individual" />
      <item value="Chained" />
      <item value="is Chained Import On Stack" />
      <item value="Tracked Condition Evaluator" />
      <item value="Read the model and create bean definitions based on its content" />
      <item value="0 x FF" />
      <item value="as read by an ASM" />
      <item value="facade" />
      <item value="Simple facade for accessing class metadata" />
      <item value="for convenience, can be specified * directly on this annotation" />
      <item value="standard way" />
      <item value="standard" />
      <item value="Convenient" />
      <item value="full" />
      <item value="lite" />
      <item value="This is a * convenience annotation that is equivalent to declaring {@code @Configuration}" />
      <item value="The reflect.AnnotatedElement interface discusses compatibility concerns when evolving an annotation type from being non-repeatable to being repeatable" />
      <item value="Retention" />
      <item value="A variation of ImportSelector that runs after all @Configuration beans have been processed. This type of selector can be particularly useful when the selected imports are @Conditional." />
      <item value="expose their singleton management facility * in a uniform manner" />
      <item value="@Bean methods may not in turn create further configuration classes (any such instances will be treated as regular beans, with their configuration annotations remaining undetected)" />
      <item value="his avoids the need to use an @Import annotation when the relationship between AppConfig and DatabaseConfig is already implicitly clear" />
      <item value="reside in" />
      <item value="therefore may also take advantage of @Autowired/@Inject like any regular @Component. In particular, if a single constructor is present autowiring semantics will be applied transparently for that constructor:" />
      <item value="Via" />
      <item value="Note that the &lt;context:component-scan&gt; element has an annotation-config attribute; however, this annotation does not. This is because in almost all cases when using @ComponentScan, default annotation config processing (e.g. processing @Autowired and friends) is assumed. Furthermore, when using AnnotationConfigApplicationContext, annotation config processors are always registered, meaning that any attempt to disable them at the @ComponentScan level would be ignored. See @Configuration's Javadoc for usage examples." />
      <item value="that the &lt;context:component-scan&gt; element has an annotation-config attribute; however, this annotation does not." />
      <item value="directives" />
      <item value="attach" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="1076" />
        <entry key="ENGLISH" value="1077" />
        <entry key="DANISH" value="5" />
        <entry key="GERMAN" value="6" />
        <entry key="FRENCH" value="7" />
        <entry key="FINNISH" value="1" />
        <entry key="PORTUGUESE" value="2" />
        <entry key="SWEDISH" value="1" />
        <entry key="SPANISH" value="6" />
        <entry key="HUNGARIAN" value="4" />
      </map>
    </option>
  </component>
  <component name="Settings">
    <option name="baiduTranslateSettings">
      <app-key>
        <option name="appId" value="20191101000350914" />
        <option name="appKeyConfigured" value="true" />
      </app-key>
    </option>
    <option name="ignoreRegExp" value="" />
    <option name="translator" value="fanyi.baidu" />
  </component>
</application>