<application>
  <component name="AppStorage">
    <histories>
      <item value="A resolution strategy for protocol-specific resource handles." />
      <item value="A resolution strategy for protocol-specific resource handles" />
      <item value="resolution" />
      <item value="This should * be appropriate for standalone implementations but can be overridden" />
      <item value="appropriate for standalone" />
      <item value="Used as an SPI for {@link DefaultResourceLoader}, allowing for * custom protocols to be handled without subclassing the loader * implementation (or application context implementation)" />
      <item value="protocol-specific resource handles" />
      <item value="pseudo" />
      <item value="and serves as base class for * {@link org.springframework.context.support.AbstractApplicationContext}. * Can also be used standalone" />
      <item value="to be * resolved as {@link org.springframework.core.env.Environment} properties" />
      <item value="Editor" />
      <item value="Delegates to a {@link ResourceLoader} to do the heavy lifting, * by default using a {@link DefaultResourceLoader}" />
      <item value="heavy lifting" />
      <item value="lifting" />
      <item value="Delegates" />
      <item value="apply Relative Path" />
      <item value="the class to load resources with" />
      <item value="alternative" />
      <item value="This will cover both directories and content resources." />
      <item value="his implementation checks whether a File can be opened, * falling back to whether an InputStream can be opened. * This will cover both directories and content resources." />
      <item value="existence" />
      <item value="handle only guarantees a valid * descriptor handle." />
      <item value="Determine whether this resource actually exists in physical form" />
      <item value="in physical form" />
      <item value="Return a provider for the specified bean, allowing for lazy on-demand retrieval * of instances, including availability and uniqueness options" />
      <item value="For more extensive retrieval operations across sets of beans, * use {@link ListableBeanFactory} and/or {@link BeanFactoryUtils}" />
      <item value="Listable" />
      <item value="Return the bean instance that uniquely matches the given object type, if any" />
      <item value="only applicable when running in an application context" />
      <item value="Listable Bean Factory" />
      <item value="The full set of initialization methods" />
      <item value="The full set of initialization methods and their standard order is" />
      <item value="as far as possible" />
      <item value="standard" />
      <item value="all of the * operations in this interface will also check parent factories if this is a * {@link HierarchicalBeanFactory}" />
      <item value="Implementations are encouraged to support references * amongst beans" />
      <item value="LDAP" />
      <item value="There are no * constraints on how the definitions could be stored" />
      <item value="However, an implementation could simply return * Java objects it creates as necessary directly in Java code" />
      <item value="it creates as necessary directly in Java code" />
      <item value="simply" />
      <item value="Note that it is generally better to rely on Dependency Injection * (&quot;push&quot; configuration) to configure application objects through setters * or constructors" />
      <item value="rely on" />
      <item value="no more do individual objects need to read properties files, * for example" />
      <item value="The point of this approach is that the BeanFactory is a central registry * of application components" />
      <item value="scope" />
      <item value="further" />
      <item value="Hierarchical Bean Factory" />
      <item value="check" />
      <item value="contrast" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="405" />
        <entry key="ENGLISH" value="406" />
        <entry key="DANISH" value="3" />
        <entry key="GERMAN" value="4" />
        <entry key="FRENCH" value="3" />
        <entry key="FINNISH" value="1" />
        <entry key="SWEDISH" value="1" />
        <entry key="SPANISH" value="3" />
        <entry key="HUNGARIAN" value="2" />
      </map>
    </option>
  </component>
  <component name="Settings">
    <option name="baiduTranslateSettings">
      <app-key>
        <option name="appId" value="20191101000350914" />
        <option name="appKeyConfigured" value="true" />
      </app-key>
    </option>
    <option name="ignoreRegExp" value="" />
    <option name="translator" value="fanyi.baidu" />
  </component>
</application>