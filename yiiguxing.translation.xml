<application>
  <component name="AppStorage">
    <histories>
      <item value="invoice nature" />
      <item value="性质" />
      <item value="想性质" />
      <item value="默认" />
      <item value="手机" />
      <item value="手机号" />
      <item value="mobail_phone" />
      <item value="stree" />
      <item value="evict Idle Connections" />
      <item value="开户" />
      <item value="post" />
      <item value="邮编" />
      <item value="receive" />
      <item value="税务登记证号" />
      <item value="Issue" />
      <item value="开具" />
      <item value="抬头" />
      <item value="发票抬头" />
      <item value="invoice" />
      <item value="发票" />
      <item value="RENEW" />
      <item value="RENEWED" />
      <item value="are ordered according to their" />
      <item value="ordered" />
      <item value="priority" />
      <item value="unbounded" />
      <item value="is Symmetry" />
      <item value="对称" />
      <item value="is Sym" />
      <item value="ensure Explicit Capacity" />
      <item value="ensure Capacity Internal" />
      <item value="扩容" />
      <item value="merge Recursive" />
      <item value="递归" />
      <item value="'TypeToken()' is declared in unstable class" />
      <item value="com.google.common.reflect.TypeToken' is marked unstable" />
      <item value="Consider writing a Map with key Class mapped to a predefined ParameterizedTypeReference for that class" />
      <item value="Type parameter 'O' hides type parameter 'O'" />
      <item value="process" />
      <item value="解释" />
      <item value="identifyNum" />
      <item value="实名认证" />
      <item value="runs faster than this loop" />
      <item value="for typical instances of the class, this loop" />
      <item value="It is recognized that the distinction between random and sequential * access is often fuzzy. For example, some &lt;tt&gt;List&lt;/tt&gt; implementations * provide asymptotically linear access times if they get huge, but constant * access times in practice. Such a &lt;tt&gt;List&lt;/tt&gt; implementation * should generally implement this interface. As a rule of thumb, a * &lt;tt&gt;List&lt;/tt&gt; implementation should implement this interface if, * for typical instances of the class, this loop:" />
      <item value="&lt;p&gt;The best algorithms for manipulating random access lists (such as * &lt;tt&gt;ArrayList&lt;/tt&gt;) can produce quadratic behavior when applied to * sequential access lists (such as &lt;tt&gt;LinkedList&lt;/tt&gt;). Generic list * algorithms are encouraged to check whether the given list is an * &lt;tt&gt;instanceof&lt;/tt&gt; this interface before applying an algorithm that would * provide poor performance if it were applied to a sequential access list, * and to alter their behavior if necessary to guarantee acceptable * performance" />
      <item value="manipulating" />
      <item value="Marker interface used by &lt;tt&gt;List&lt;/tt&gt; implementations to indicate that * they support fast (generally constant time) random access. The primary * purpose of this interface is to allow generic algorithms to alter their * behavior to provide good performance when applied to either random or * sequential access lists" />
      <item value="数据结构和算法" />
      <item value="算法" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="876" />
        <entry key="ENGLISH" value="877" />
        <entry key="DANISH" value="3" />
        <entry key="FRENCH" value="6" />
        <entry key="CATALAN" value="2" />
        <entry key="KANNADA" value="1" />
        <entry key="LATVIAN" value="3" />
        <entry key="ROMANIAN" value="2" />
        <entry key="SWEDISH" value="1" />
        <entry key="SLOVENIAN" value="1" />
        <entry key="SPANISH" value="1" />
        <entry key="GREEK" value="1" />
        <entry key="ITALIAN" value="2" />
        <entry key="HINDI" value="1" />
      </map>
    </option>
  </component>
</application>