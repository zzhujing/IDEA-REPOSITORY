<application>
  <component name="AppStorage">
    <option name="newTranslationDialogHeight" value="474" />
    <option name="newTranslationDialogWidth" value="1510" />
    <option name="newTranslationDialogX" value="1050" />
    <option name="newTranslationDialogY" value="507" />
    <histories>
      <item value="select Invocable Method" />
      <item value="Observable" />
      <item value="navigation" />
      <item value="assumed" />
      <item value="etermine the target type for the generic return type of the given method, where formal type variables are declared on the given class." />
      <item value="against type variables" />
      <item value="Helper class for resolving generic types against type variables" />
      <item value="against" />
      <item value="adjust&#10;" />
      <item value="Narrows" />
      <item value="over-eager type matching" />
      <item value="allow Raw Injection Despite Wrapping" />
      <item value="Suppresses" />
      <item value="Set of dependent bean names." />
      <item value="Set of bean names for the bean's dependencies" />
      <item value="depending" />
      <item value="dependent" />
      <item value="stale" />
      <item value="Eagerly" />
      <item value="canonical Name" />
      <item value="transformed" />
      <item value="Introduction" />
      <item value="Register the target bean as separate bean in the factory." />
      <item value="accordingly" />
      <item value="Note that a bean definition reader does not have to implement&#10; * this interface. It only serves as suggestion for bean definition&#10; * readers that want to follow standard naming conventions.&#10;" />
      <item value="Specifies&#10;" />
      <item value="虚拟的&#10;" />
      <item value="virtual&#10;" />
      <item value="xu" />
      <item value="Response to preflight request doesn't pass access control check: Redirect is not allowed for a preflight request.&#10;" />
      <item value="指定用户&#10;" />
      <item value="SPECIFIED" />
      <item value="reflection" />
      <item value="immediate originator" />
      <item value="the decorated bean definition" />
      <item value="Set whether this bean is a candidate for getting autowired into some other bean. &lt;p&gt;Note that this flag is designed to only affect type-based autowiring. It does not affect explicit references by name, which will get resolved even if the specified bean is not marked as an autowire candidate. As a consequence, autowiring by name will nevertheless inject a bean if the name matches." />
      <item value="guarantee&#10;" />
      <item value="whether&#10;" />
      <item value="Return the current bean class name of this bean definition.&#10;Note that this does not have to be the actual class name used at runtime, in case of a child definition overriding/inheriting the class name from its parent. Also, this may just be the class that a factory method is called on, or it may even be empty in case of a factory bean reference that a method is called on. Hence, do not consider this to be the definitive bean type at runtime but rather only use it for parsing purposes at the individual bean definition level.&#10;" />
      <item value="&gt;This GenericBeanDefinition variant is mainly useful for testing code that expects to operate on an AnnotatedBeanDefinition, for example strategy implementations in Spring's component scanning support (where the default definition class is {@link org.springframework.context.annotation.ScannedGenericBeanDefinition}, which also implements the AnnotatedBeanDefinition interface)." />
      <item value="expects" />
      <item value="convention-based" />
      <item value="computational" />
      <item value="synthesized" />
      <item value="he annotation is a composed annotation that relies on convention-based annotation attribute overrides in meta-annotations" />
      <item value="convention" />
      <item value="synthesizable" />
      <item value="regardless of" />
      <item value="mirrored" />
      <item value="ultimately" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="5544" />
        <entry key="ENGLISH" value="5545" />
        <entry key="CHINESE_CLASSICAL" value="1" />
        <entry key="ALBANIAN" value="1" />
        <entry key="AZERBAIJANI" value="1" />
        <entry key="ICELANDIC" value="1" />
        <entry key="POLISH" value="1" />
        <entry key="DANISH" value="9" />
        <entry key="GERMAN" value="9" />
        <entry key="FRENCH" value="17" />
        <entry key="FINNISH" value="1" />
        <entry key="DUTCH" value="1" />
        <entry key="CATALAN" value="4" />
        <entry key="KURDISH" value="1" />
        <entry key="ROMANIAN" value="7" />
        <entry key="MALAY" value="1" />
        <entry key="PORTUGUESE" value="8" />
        <entry key="SWEDISH" value="3" />
        <entry key="SLOVAK" value="1" />
        <entry key="WELSH" value="1" />
        <entry key="SPANISH" value="13" />
        <entry key="HUNGARIAN" value="5" />
        <entry key="ITALIAN" value="5" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1635583926243" />
  </component>
  <component name="Settings">
    <option name="baiduTranslateSettings">
      <app-key>
        <option name="appId" value="20191101000350914" />
      </app-key>
    </option>
    <option name="primaryFontFamily" value="JetBrains Mono" />
    <option name="translator" value="BAIDU" />
  </component>
</application>